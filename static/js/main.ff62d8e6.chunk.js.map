{"version":3,"sources":["App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["App","useState","loading","stateData","name","found","cityFound","appState","setAppState","useEffect","axios","get","then","reponse","statewiseData","data","statewise","localStorage","setItem","JSON","stringify","console","log","catch","error","parse","getItem","onSubmitHandler","event","preventDefault","i","length","state","toLowerCase","cityData","render","online","className","confirmed","deltaconfirmed","active","recovered","deltarecovered","deaths","deltadeaths","onSubmit","type","placeholder","onChange","e","target","value","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ff62d8e6.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Detector } from \"react-detect-offline\";\nimport './App.css';\n\nfunction App() {\n  const [appState, setAppState] = useState({\n    loading: false,\n    stateData: null,\n    name: '',\n    found: false,\n    cityFound:null\n  })\n\n  useEffect(() => {\n    setAppState({ loading: true });\n    const apiUrl = \"https://api.covid19india.org/data.json\";\n    axios.get(apiUrl)\n      .then(reponse => {\n       \n        const statewiseData = reponse.data.statewise;\n        localStorage.setItem('stateData', JSON.stringify(statewiseData))\n        setAppState({ loading: false, stateData: statewiseData });\n        console.log(stateData);\n      })\n      .catch(error => {\n        setAppState({ loading: false });\n        console.log('Something went wrong');\n      })\n  }, []);\n\n  const { loading } = appState;\n  const stateData = JSON.parse(localStorage.getItem('stateData'));\n  \n  console.log(appState);\n\n  const onSubmitHandler = (event) => {\n    event.preventDefault();\n    console.log(event);\n    let i = stateData.length;\n    console.log(i);\n    while(i--){\n      if(appState.name === stateData[i].state.toLowerCase())\n      {\n            const cityData = stateData[i];\n            console.log(cityData);\n            setAppState({found:true,cityFound:cityData});\n            break;\n        }\n    }\n    }\n\n  \n  return (\n    <Detector\n      render={({ online }) => (\n        <div className={online ? \"App\" : \"Offline-App\"}>\n          <div className=\"container\">\n            <h2 className=\"app-title\">Covid-19 India</h2>\n            {\n              stateData &&\n              <>\n                <div className=\"card confirmed\">\n                  <h4>Confirmed</h4>\n                  <h2>\n                    {stateData[0].confirmed}\n                    <small>\n                      (+{stateData[0].deltaconfirmed})\n                    </small>\n                  </h2>\n                </div>\n                <div className=\"card active\">\n                  <h4>Active</h4>\n                  <h2>{stateData[0].active}</h2>\n                </div>\n                <div className=\"card recovered\">\n                  <h4>Recovered</h4>\n                  <h2>\n                    {stateData[0].recovered}\n                    <small>\n                      (+{stateData[0].deltarecovered})\n                    </small>\n                  </h2>\n                </div>\n                <div className=\"card deceased\">\n                  <h4>Deceased</h4>\n                  <h2>\n                    {stateData[0].deaths}\n                    <small>\n                      (+{stateData[0].deltadeaths})\n                    </small>\n                  </h2>\n                </div>\n                <div className =\"card-search\">\n                  <h4>Check the status in your state below</h4>\n                  <br></br>\n                  <form onSubmit = {onSubmitHandler}> \n                    <input type='text'placeholder = 'Enter city'onChange={(e)=>{ setAppState({name : e.target.value})}}>\n\n                    </input>\n                    <button type='submit'>Check</button>\n                  </form></div>\n                  <div>\n                    {appState.found ? \n                          <>\n                              <div className=\"card confirmed\">\n                              <h4>Confirmed</h4>\n                              <h2>\n                                {appState.cityFound.confirmed}\n                                <small>\n                                  (+{appState.cityFound.deltaconfirmed})\n                                </small>\n                              </h2>\n                              </div> \n                              <div className=\"card active\">\n                          <h4>Active</h4>\n                          <h2>{appState.cityFound.active}</h2>\n                        </div>\n                        <div className=\"card recovered\">\n                          <h4>Recovered</h4>\n                          <h2>\n                            {appState.cityFound.recovered}\n                            <small>\n                              (+{appState.cityFound.deltarecovered})\n                            </small>\n                          </h2>\n                        </div>\n                        <div className=\"card deceased\">\n                          <h4>Deceased</h4>\n                          <h2>\n                            {appState.cityFound.deaths}\n                            <small>\n                              (+{appState.cityFound.deltadeaths})\n                            </small>\n                          </h2>\n                        </div>\n                      </>\n                      : \n                      <div className=\"app-searching\"> Searching..</div>\n                      } \n                    </div>\n              </>\n            }\n            {!online &&\n              <span className=\"offline-text\">You are currently offline</span>\n            }\n          </div>\n        </div>        \n      )}\n    />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\n\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n  "],"sourceRoot":""}